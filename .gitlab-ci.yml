stages:
  - build
  - test
  - docker-push

variables:
  IMAGE: '$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG'
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

build:
  stage: build
  image: amazoncorretto:21-alpine
  only:
    - main
  cache:
    - key: $CI_COMMIT_REF_SLUG
      paths:
        - .gradle/
    - key: $CI_PIPELINE_ID
      policy: push
      paths:
        - app/build/
  script:
    - ./gradlew jibBuildTar --image=$IMAGE
    # build standalone jar and save as job artifact
#    - ./gradlew build

run-tests:
  stage: test
  image: amazoncorretto:21-alpine
  services:
    - redis:alpine
    - name: ydbplatform/local-ydb:latest
      alias: local-ydb
  variables:
    # test container
    JEDIS_REDIS_PATH: "redis://redis:6379"
    JAKARTA_PERSISTENCE_JDBC_URL: "jdbc:ydb:grpc://local-ydb:2136/local"

    # YDB container
    GRPC_PORT: 2136
  only:
    variables:
      # run for protected branches only
      - $CI_COMMIT_REF_PROTECTED == 'true'
  cache:
    - key: $CI_COMMIT_REF_SLUG
      policy: pull
      paths:
        - .gradle/
    - key: $CI_PIPELINE_ID
      policy: pull
      paths:
        - build/
  script:
    - ./gradlew jacocoTestReport
    - awk -F, '{ lines += $8 + $9; covered += $9 } END { print covered, "/", lines, " lines covered"; print 100*covered/lines, "% covered" }' app/build/reports/jacoco/test/jacocoTestReport.csv
  coverage: '/([\d,.]+) \% covered/'

docker-push:
  stage: docker-push
  image: docker:stable
  only:
    - main
  cache:
    key: $CI_PIPELINE_ID
    policy: pull
    paths:
      - app/build/
  services:
    - docker:stable-dind
  variables:
    GIT_STRATEGY: none
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker load --input app/build/jib-image.tar
    - docker push $IMAGE
